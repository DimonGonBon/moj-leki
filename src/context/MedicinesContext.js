import React, { createContext, useState, useContext, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import { useAuth } from './AuthContext';
import AsyncStorage from '@react-native-async-storage/async-storage';

const MedicinesContext = createContext({}); //–°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Ç—Å —Ç—á–æ –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö
const STORAGE_KEY = 'cached_medicines';

export const MedicinesProvider = ({ children }) => { //–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–π–Ω—ã –∫–æ—Ç–æ—Ä—ã–π –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–æ–¥ —á—Ç–æ –±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç
  const [medicines, setMedicines] = useState([]); //–°–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ —é–∑–µ—Ä–∞
  const { user } = useAuth(); //–¢–µ–∫—É—â–∏–π —é–∑–µ—Ä —á—Ç–æ –≤–∑—è—Ç –∏–∑ –ê—É—Ç–µ–Ω—Ç.–ö–æ–Ω—Ç–µ–∫—Å—Ç

  useEffect(() => { //–ï—Å–ª–∏ —é–∑–µ—Ä —Å–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –≤–æ—à–µ–ª —Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–∑ —Å—É–ø–∞–±–∞–∑–µ
    if (user) {
      fetchMedicines();
    }
  }, [user]);

  const fetchMedicines = async () => { //–ü–æ–ª—É—á–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è
    try {
      const { data, error } = await supabase
        .from('medicines')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error || !data) {
        const cached = await AsyncStorage.getItem(STORAGE_KEY);
        if (cached) {
          const parsed = JSON.parse(cached);
          setMedicines(parsed);
          console.log('üì¶ Loaded medicines from offline cache');
          return { data: parsed, error: null };
        }
        return { data: null, error };
      }

      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(data));
      setMedicines(data);
      return { data, error: null };
    } catch (e) {
      console.error('‚ùå fetchMedicines error:', e);
      const cached = await AsyncStorage.getItem(STORAGE_KEY);
      if (cached) {
        const parsed = JSON.parse(cached);
        setMedicines(parsed);
        return { data: parsed, error: null };
      }
      return { data: null, error: e };
    }
  };

  const updateCache = async (updatedList) => {
    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(updatedList));
  };

  const addMedicine = async (medicine) => { //–î–æ–±–∞–≤–ª—è–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤ –±–∞–∑—É –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
    try {
      const { data, error } = await supabase
        .from('medicines')
        .insert([{ ...medicine, user_id: user.id, taken: false }])
        .select();

      if (error) return { data: null, error };//–î–æ–±–∞–≤–ª—è–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞

      const newList = [data[0], ...medicines];
      setMedicines(newList);
      await updateCache(newList);

      return { data: data[0], error: null };
    } catch (e) {
      return { data: null, error: e };
    }
  };

  const updateMedicine = async (id, updatedFields) => { //–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∞–π–¥–∏ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —é–∑–µ—Ä—É 
    try {
      const { data, error } = await supabase
        .from('medicines')
        .update(updatedFields)
        .eq('id', id)
        .eq('user_id', user.id)
        .select();

      if (error) return { data: null, error };

      const newList = medicines.map(m =>
        m.id === id ? { ...m, ...updatedFields } : m
      );
      setMedicines(newList); //–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      await updateCache(newList);

      return { data: data[0], error: null };
    } catch (e) {
      return { data: null, error: e };
    }
  };

  const deleteMedicine = async (id) => { // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ –∞–π–¥–∏ –∏ —é–∑–µ—Ä–∞–π–¥–∏
    try {
      const { error } = await supabase
        .from('medicines')
        .delete()
        .eq('id', id)
        .eq('user_id', user.id);

      if (error) return { error };

      const newList = medicines.filter(m => m.id !== id); //–£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–π–¥–∏ 
      setMedicines(newList);//–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ 
      await updateCache(newList);

      return { error: null };
    } catch (e) {
      return { error: e };
    }
  };

  return ( //–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    <MedicinesContext.Provider
      value={{
        medicines,
        addMedicine,
        updateMedicine,
        deleteMedicine,
        fetchMedicines
      }}
    >
      {children}
    </MedicinesContext.Provider>
  );
};

export const useMedicines = () => useContext(MedicinesContext); //–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ö—É–∫
