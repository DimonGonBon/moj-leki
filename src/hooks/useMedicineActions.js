import { Alert } from 'react-native';
import * as Notifications from 'expo-notifications';
import * as Clipboard from 'expo-clipboard';
import * as Sharing from 'expo-sharing';
import * as Linking from 'expo-linking';

export default function useMedicineActions({ medicine, time, updateMedicine, fetchMedicines, setTime }) {
  const handleSaveAndNotify = async () => { //—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    const now = new Date(); //–ë–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–µ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    const selectedTime = new Date(time);

    if (selectedTime < now) { //–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ–≥–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
      selectedTime.setDate(selectedTime.getDate() + 1);
      setTime(selectedTime);
    }

    try {
      await Notifications.scheduleNotificationAsync({ //–ü–ª–∞–Ω–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ expo-notifications
        content: {
          title: "Czas na lek üíä",
          body: `Nie zapomnij przyjƒÖƒá leku: ${medicine.name}`,
        },
        trigger: selectedTime,
      });

      const { error } = await updateMedicine(medicine.id, {
        reminder_time: selectedTime.toISOString(), //–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      });

      if (error) {
        Alert.alert("B≈ÇƒÖd", error.message || "Nie uda≈Ço siƒô zapisaƒá zmiany.");
        return;
      }

      const isTomorrow = selectedTime.getDate() !== now.getDate();
      Alert.alert(
        "Zapisano",
        `Przypomnienie ustawione na ${selectedTime.toLocaleTimeString()} ${isTomorrow ? "(jutro)" : ""}` //–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤
      );

      fetchMedicines();
    } catch (error) {
      console.error("B≈ÇƒÖd zapisu:", error);
      Alert.alert("B≈ÇƒÖd", "Nie uda≈Ço siƒô ustawiƒá przypomnienia.");
    }
  };

  const handleMarkAsTaken = async (intervalHours = 8) => { //–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 8 —á–∞—Å–æ–≤
    const nextTime = new Date(time);
    nextTime.setHours(nextTime.getHours() + intervalHours); //–°—á–∏—Ç–∞–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è

    const { error } = await updateMedicine(medicine.id, { //–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å taken: true –∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      taken: true,
      reminder_time: nextTime.toISOString(),
    });

    if (error) {
      Alert.alert("B≈ÇƒÖd", error.message || "Nie uda≈Ço siƒô zapisaƒá zmiany.");
    } else {
      Alert.alert("Zapisano", `Nastƒôpna dawka o ${nextTime.toLocaleTimeString()}`); //–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      fetchMedicines();
    }
  };

  const handleShare = async () => {
    const deepLink = Linking.createURL(`medicine/${medicine.id}`); //–°–æ–∑–¥–∞—ë–º deep link, –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await Clipboard.setStringAsync(deepLink);
    Alert.alert('Link skopiowany', deepLink);

    if (await Sharing.isAvailableAsync()) { //–ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –º–æ–¥—É–ª—å Sharing, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
      await Sharing.shareAsync('', {
        dialogTitle: 'Udostƒôpnij link',
        url: deepLink,
      });
    }
  };

  return { handleSaveAndNotify, handleMarkAsTaken, handleShare }; //–•—É–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å 3 –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
}
